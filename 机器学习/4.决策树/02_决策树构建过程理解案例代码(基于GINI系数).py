# -- encoding:utf-8 --
"""
Create by ibf on 2018/11/11
"""

import numpy as np


def gini(t):
    return 1 - np.sum([pi * pi for pi in t])


print("选择第一个划分特征")
# a. 计算原始数据集中的信息熵
h = gini([0.7, 0.3])
print("当前数据集中的目标属性的信息熵:%.3f" % h)
# b. 分别计算基于房产、基于婚姻情况、基于年收入的信息增益度
# i. 基于基于房产的信息增益度
# 第一个分支的概率以及对应数据的信息熵
p11 = 0.4
h11 = gini([1.0])
# 第二个分支的概率以及对应数据的信息熵
p12 = 0.6
h12 = gini([0.5, 0.5])
# 计算信息熵
h1 = p11 * h11 + p12 * h12
# 计算信息增益度
g1 = h - h1
print("以房产作为划分特征的条件熵:%.3f" % h1)
print("以房产作为划分特征的信息增益度:%.3f" % g1)

# ii. 基于基于婚姻情况的信息增益度
# 第一个分支的概率以及对应数据的信息熵 -> 单身 4、2、2
p21 = 0.4
h21 = gini([0.5, 0.5])
# 第二个分支的概率以及对应数据的信息熵 -> 离婚 3、2、1
p22 = 0.3
h22 = gini([1.0 / 3, 2.0 / 3])
# 第三个分支的概率以及对应数据的信息熵 -> 已婚 3、3、0
p23 = 0.3
h23 = gini([1.0])
# 计算信息熵
h2 = p21 * h21 + p22 * h22 + p23 * h23
# 计算信息增益度
g2 = h - h2
print("以婚姻情况作为划分特征的条件熵:%.3f" % h2)
print("以婚姻情况作为划分特征的信息增益度:%.3f" % g2)

# iii. 基于年收入80的信息增益度
# 第一个分支的概率以及对应数据的信息熵 <= 80
p31 = 0.2
h31 = gini([1.0])
# 第二个分支的概率以及对应数据的信息熵 > 80
p32 = 0.8
h32 = gini([3.0 / 8, 5.0 / 8])
# 计算信息熵
h3 = p31 * h31 + p32 * h32
# 计算信息增益度
g3 = h - h3
print("以年收入80作为划分特征的条件熵:%.3f" % h3)
print("以年收入80作为划分特征的信息增益度:%.3f" % g3)

# iiii. 基于年收入97.5的信息增益度
# 第一个分支的概率以及对应数据的信息熵 <= 97.5
p41 = 0.5
h41 = gini([2.0 / 5, 3.0 / 5])
# 第二个分支的概率以及对应数据的信息熵 > 97.5
p42 = 0.5
h42 = gini([1.0])
# 计算信息熵
h4 = p41 * h41 + p42 * h42
# 计算信息增益度
g4 = h - h4
print("以年收入97.5作为划分特征的条件熵:%.3f" % h4)
print("以年收入97.5作为划分特征的信息增益度:%.3f" % g4)
